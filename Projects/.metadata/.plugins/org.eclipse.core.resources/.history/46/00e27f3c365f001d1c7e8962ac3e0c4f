package edu.jspider.Comparable;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.Comparator;
import java.util.stream.Stream;

public class EmployeeDriver {

	public static void main(String[] args) {
		Employee e1 = new Employee("Arshad Alam", 101, 55000);
		Employee e2 = new Employee("Rivu Naskar", 201, 53000);
		Employee e3 = new Employee("Akhil Pandu", 301, 50000);
		Employee e4 = new Employee("Keerthi Suresh", 401, 72000);
		Employee e5 = new Employee("Sai Pallavi", 501, 75000);
		Employee e6 = new Employee("Allu Arjun", 601, 142000);
		Employee e7 = new Employee("Ram Charan", 701, 135000);
		Employee e8 = new Employee("Jr NTR", 801, 138000);
		Employee e9 = new Employee("Ravi Teja", 901, 84000);
		Employee e10 = new Employee("Nayantara", 1001, 135000);

		ArrayList<Employee> list = new ArrayList<>();
		list.add(e10);
		list.add(e9);
		list.add(e8);
		list.add(e7);
		list.add(e6);
		list.add(e5);
		list.add(e4);
		list.add(e3);
		list.add(e2);
		list.add(e1);
		// Sorting based on Natural Ordering.
		/*Collections.sort(list);
		for (Employee emp : list)
			System.out.println(emp);
		// Sorting Based on Id.
		Comparator<Employee> comparator = new Comparator<Employee>() {
			@Override
			public int compare(Employee emp1, Employee emp2) {
				return emp1.employeeId - emp2.employeeId;
			}
		};
		System.out.println("===============================================================================");
		System.out.println("Compare Based on Id");
		Collections.sort(list, comparator);
		for (Employee emp : list)
			System.out.println(emp);
		System.out.println("===============================================================================");
		System.out.println("Comparison Based on Salary : ");
		comparator = (Employee emp1, Employee emp2) -> (int) (emp1.employeeSalary - emp2.employeeSalary);
		Collections.sort(list, comparator);
		for (Employee e : list)
			System.out.println(e);*/
		
		Stream<Employee> stream = list.stream();
//		stream.filter(sal->sal.employeeSalary>60000).forEach(sal->System.out.println(sal));
		long count=stream.filter(sal->sal.employeeSalary>60000).count();
		System.out.println("Count : "+count);
	}
}
